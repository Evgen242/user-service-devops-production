package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	_ "github.com/lib/pq"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// –º–µ—Ç—Ä–∏–∫–∏
var (
	httpRequestsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "http_requests_total",
		Help: "Total number of HTTP requests",
	}, []string{"endpoint", "method", "status"})

	httpRequestDuration = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "http_request_duration_seconds",
		Help:    "HTTP request duration in seconds",
		Buckets: prometheus.DefBuckets,
	}, []string{"endpoint", "method", "status"})

	httpRequestsInFlight = promauto.NewGauge(prometheus.GaugeOpts{
		Name: "http_requests_in_flight",
		Help: "Current number of HTTP requests in flight",
	})

	usersCountTotal = promauto.NewGauge(prometheus.GaugeOpts{
		Name: "users_count_total",
		Help: "Total number of users in the database",
	})

	databaseConnections = promauto.NewGauge(prometheus.GaugeOpts{
		Name: "database_connections_total",
		Help: "Current number of database connections",
	})

	userOperationsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "user_operations_total",
		Help: "Total number of user operations",
	}, []string{"operation"})
)

var db *sql.DB

func initDB() {
	dbHost := getEnv("DB_HOST", "localhost")
	dbPort := getEnv("DB_PORT", "5432")
	dbName := getEnv("DB_NAME", "user_service_test")
	dbUser := getEnv("DB_USER", "postgres")
	dbPassword := getEnv("DB_PASSWORD", "Moto2025")

	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort, dbUser, dbPassword, dbName)

	fmt.Printf("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL: %s:%s\n", dbHost, dbPort)

	var err error
	db, err = sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}

	err = db.Ping()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ ping –ë–î: %v", err)
	}
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func updateDatabaseMetrics() {
	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var userCount int
	err := db.QueryRow("SELECT COUNT(*) FROM users").Scan(&userCount)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
	} else {
		usersCountTotal.Set(float64(userCount))
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
	var connCount int
	err = db.QueryRow("SELECT COUNT(*) FROM pg_stat_activity WHERE datname = $1", 
		getEnv("DB_NAME", "user_service_test")).Scan(&connCount)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: %v", err)
	} else {
		databaseConnections.Set(float64(connCount))
	}
}

// Prometheus middleware
func prometheusMiddleware(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		start := time.Now()
		err := next(c)
		duration := time.Since(start).Seconds()

		httpRequestDuration.WithLabelValues(
			c.Path(),
			c.Request().Method,
			fmt.Sprintf("%d", c.Response().Status),
		).Observe(duration)

		httpRequestsTotal.WithLabelValues(
			c.Path(),
			c.Request().Method,
			fmt.Sprintf("%d", c.Response().Status),
		).Inc()

		return err
	}
}

func healthHandler(c echo.Context) error {
	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
	updateDatabaseMetrics()

	healthStatus := map[string]interface{}{
		"status":   "healthy",
		"database": "connected",
		"timestamp": time.Now().Format(time.RFC3339),
	}
	return c.JSON(http.StatusOK, healthStatus)
}

func getUsersHandler(c echo.Context) error {
	userOperationsTotal.WithLabelValues("get_users").Inc()

	rows, err := db.Query("SELECT id, name, email, created_at FROM users")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return c.JSON(http.StatusInternalServerError, map[string]string{
			"error": "Failed to fetch users",
		})
	}
	defer rows.Close()

	var users []map[string]interface{}
	for rows.Next() {
		var id int
		var name, email string
		var createdAt time.Time
		err = rows.Scan(&id, &name, &email, &createdAt)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			continue
		}
		users = append(users, map[string]interface{}{
			"id":         id,
			"name":       name,
			"email":      email,
			"created_at": createdAt.Format(time.RFC3339),
		})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
	updateDatabaseMetrics()

	return c.JSON(http.StatusOK, map[string]interface{}{
		"users": users,
		"total": len(users),
	})
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	initDB()
	defer db.Close()

	// –°–æ–∑–¥–∞–µ–º Echo instance
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(prometheusMiddleware)

	// Routes
	e.GET("/health", healthHandler)
	e.GET("/api/users", getUsersHandler)
	e.GET("/metrics", echo.WrapHandler(promhttp.Handler()))

	// –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	host := getEnv("HOST", "0.0.0.0")
	port := getEnv("PORT", "8091")
	address := fmt.Sprintf("%s:%s", host, port)

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ %s\n", address)
	fmt.Printf("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ: http://%s/metrics\n", address)
	fmt.Printf("‚ù§Ô∏è  Health check: http://%s/health\n", address)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
	e.Logger.Fatal(e.Start(address))
}
